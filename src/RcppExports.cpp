// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// MCMC_full
List MCMC_full(const int n_iter, const int n_save, arma::mat Z, arma::mat theta_t, arma::mat ind_zero, arma::mat mu_t, arma::mat p_t, arma::mat h_t, arma::mat psi_t, arma::mat ind_mat, arma::vec lambda0_t, arma::vec lambda1_t, arma::vec C_t, arma::vec R_t, arma::vec sgm_sq_t, arma::vec sgm_sq_star_t, arma::vec gam_1, arma::mat gam_2, int G, int n, int m, int K, int S, double sgm_sq_vare_t, double eta_mu, double tau_mu, double alpha_1, double beta_1, double gamma_0, double alpha_vare, double beta_vare, double alpha_2, double beta_2, double tau_0, double eta_psi, double tau_psi, double epsilon_theta, int num_step_theta, double lam0_0, double lam1_0, double sigma2_lam0, double sigma2_lam1, double epsilon_lam, int num_step_lam, bool iter_save, int iter_print, bool class_print);
RcppExport SEXP _BayesEATS_MCMC_full(SEXP n_iterSEXP, SEXP n_saveSEXP, SEXP ZSEXP, SEXP theta_tSEXP, SEXP ind_zeroSEXP, SEXP mu_tSEXP, SEXP p_tSEXP, SEXP h_tSEXP, SEXP psi_tSEXP, SEXP ind_matSEXP, SEXP lambda0_tSEXP, SEXP lambda1_tSEXP, SEXP C_tSEXP, SEXP R_tSEXP, SEXP sgm_sq_tSEXP, SEXP sgm_sq_star_tSEXP, SEXP gam_1SEXP, SEXP gam_2SEXP, SEXP GSEXP, SEXP nSEXP, SEXP mSEXP, SEXP KSEXP, SEXP SSEXP, SEXP sgm_sq_vare_tSEXP, SEXP eta_muSEXP, SEXP tau_muSEXP, SEXP alpha_1SEXP, SEXP beta_1SEXP, SEXP gamma_0SEXP, SEXP alpha_vareSEXP, SEXP beta_vareSEXP, SEXP alpha_2SEXP, SEXP beta_2SEXP, SEXP tau_0SEXP, SEXP eta_psiSEXP, SEXP tau_psiSEXP, SEXP epsilon_thetaSEXP, SEXP num_step_thetaSEXP, SEXP lam0_0SEXP, SEXP lam1_0SEXP, SEXP sigma2_lam0SEXP, SEXP sigma2_lam1SEXP, SEXP epsilon_lamSEXP, SEXP num_step_lamSEXP, SEXP iter_saveSEXP, SEXP iter_printSEXP, SEXP class_printSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_save(n_saveSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type theta_t(theta_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ind_zero(ind_zeroSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu_t(mu_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type p_t(p_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type h_t(h_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type psi_t(psi_tSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ind_mat(ind_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda0_t(lambda0_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda1_t(lambda1_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type C_t(C_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R_t(R_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sgm_sq_t(sgm_sq_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sgm_sq_star_t(sgm_sq_star_tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gam_1(gam_1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gam_2(gam_2SEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type sgm_sq_vare_t(sgm_sq_vare_tSEXP);
    Rcpp::traits::input_parameter< double >::type eta_mu(eta_muSEXP);
    Rcpp::traits::input_parameter< double >::type tau_mu(tau_muSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_1(alpha_1SEXP);
    Rcpp::traits::input_parameter< double >::type beta_1(beta_1SEXP);
    Rcpp::traits::input_parameter< double >::type gamma_0(gamma_0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha_vare(alpha_vareSEXP);
    Rcpp::traits::input_parameter< double >::type beta_vare(beta_vareSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_2(alpha_2SEXP);
    Rcpp::traits::input_parameter< double >::type beta_2(beta_2SEXP);
    Rcpp::traits::input_parameter< double >::type tau_0(tau_0SEXP);
    Rcpp::traits::input_parameter< double >::type eta_psi(eta_psiSEXP);
    Rcpp::traits::input_parameter< double >::type tau_psi(tau_psiSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_theta(epsilon_thetaSEXP);
    Rcpp::traits::input_parameter< int >::type num_step_theta(num_step_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type lam0_0(lam0_0SEXP);
    Rcpp::traits::input_parameter< double >::type lam1_0(lam1_0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_lam0(sigma2_lam0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2_lam1(sigma2_lam1SEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_lam(epsilon_lamSEXP);
    Rcpp::traits::input_parameter< int >::type num_step_lam(num_step_lamSEXP);
    Rcpp::traits::input_parameter< bool >::type iter_save(iter_saveSEXP);
    Rcpp::traits::input_parameter< int >::type iter_print(iter_printSEXP);
    Rcpp::traits::input_parameter< bool >::type class_print(class_printSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_full(n_iter, n_save, Z, theta_t, ind_zero, mu_t, p_t, h_t, psi_t, ind_mat, lambda0_t, lambda1_t, C_t, R_t, sgm_sq_t, sgm_sq_star_t, gam_1, gam_2, G, n, m, K, S, sgm_sq_vare_t, eta_mu, tau_mu, alpha_1, beta_1, gamma_0, alpha_vare, beta_vare, alpha_2, beta_2, tau_0, eta_psi, tau_psi, epsilon_theta, num_step_theta, lam0_0, lam1_0, sigma2_lam0, sigma2_lam1, epsilon_lam, num_step_lam, iter_save, iter_print, class_print));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesEATS_MCMC_full", (DL_FUNC) &_BayesEATS_MCMC_full, 47},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesEATS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
